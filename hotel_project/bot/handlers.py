import requests
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from .keyboards import get_main_menu, get_main_menu_button

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "7939429240:AAEKhK8j3xc-cBAU8pc1ifDX1xNwSRPo0gw"
API_URL = "http://127.0.0.1:8000/api/"
bot = TeleBot(BOT_TOKEN)
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –æ—Ç–µ–ª–µ.",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def return_to_main_menu(call):
    bot.send_message(
        call.message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä")
def find_room(message):
    markup = get_main_menu_button()
    bot.send_message(
        message.chat.id,
        "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'YYYY-MM-DD - YYYY-MM-DD'",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_dates)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç
def process_dates(message):
    try:
        date_parts = message.text.split(" - ")
        if len(date_parts) != 2:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'YYYY-MM-DD - YYYY-MM-DD'")
            return
        check_in, check_out = date_parts[0].strip(), date_parts[1].strip()
        chat_id = message.chat.id
        user_data[chat_id] = {"check_in": check_in, "check_out": check_out}

        response = requests.get(f"{API_URL}room-categories/")
        categories = response.json()
        if not categories:
            bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–º–Ω–∞—Ç.")
            return

        category_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–Ω–∞—Ç—ã:\n"
        for category in categories:
            category_message += f"ID: {category['id']}\n"
            category_message += f"‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ: {category['name']}\n"
            category_message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {category['description'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="find_room"),
            InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")
        )

        bot.send_message(
            message.chat.id,
            category_message,
            reply_markup=markup
        )
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        )
        bot.register_next_step_handler(message, process_category_selection)
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def process_category_selection(message):
    try:
        chat_id = message.chat.id
        user_info = user_data.get(chat_id, {})
        check_in = user_info.get("check_in")
        check_out = user_info.get("check_out")

        if not check_in or not check_out:
            bot.reply_to(message, "–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏–ª–∏ –≤—ã–µ–∑–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        category_id = int(message.text.strip())
        response = requests.get(
            f"{API_URL}rooms/",
            params={"category": category_id, "check_in": check_in, "check_out": check_out}
        )
        rooms = response.json()

        for room in rooms:
            room_info = (
                f"ID: {room['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
                f"–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {room['price_per_night']} —Ä—É–±.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {room['description'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            )
            markup = InlineKeyboardMarkup()
            markup.row(
                InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{room['id']}"),
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="select_category"),
                InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")
            )
            bot.send_message(
                message.chat.id,
                room_info,
                reply_markup=markup
            )
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith("book_"))
def handle_booking(call):
    try:
        room_id = int(call.data.split("_")[1])
        chat_id = call.message.chat.id
        if chat_id not in user_data:
            user_data[chat_id] = {}
        user_data[chat_id]["room_id"] = room_id

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="select_room"),
            InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")
        )

        bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: first_name, last_name, email, phone",
            reply_markup=markup
        )
        bot.register_next_step_handler(call.message, process_booking)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def process_booking(message):
    try:
        chat_id = message.chat.id
        data_parts = message.text.split(",")
        if len(data_parts) != 4:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: first_name, last_name, email, phone")
            return

        first_name = data_parts[0].strip()
        last_name = data_parts[1].strip()
        email = data_parts[2].strip()
        phone = data_parts[3].strip()

        from accounts.models import Profile
        profile, created = Profile.objects.get_or_create(chat_id=chat_id)
        profile.update_from_telegram(
            chat_id=chat_id,
            first_name=first_name,
            last_name=last_name,
            email=email,
            phone=phone
        )

        booking_data = {
            "room": user_data[chat_id]["room_id"],
            "check_in": user_data[chat_id]["check_in"],
            "check_out": user_data[chat_id]["check_out"],
            "guests": 1,
            "first_name": first_name,
            "last_name": last_name,
            "email": email,
            "phone": phone,
        }

        response = requests.post(f"{API_URL}bookings/", json=booking_data)
        if response.status_code == 201:
            bot.send_message(chat_id, "–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
        else:
            error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {error_message}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
def handle_my_bookings(message):
    show_my_bookings(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(commands=['my_bookings'])
def show_my_bookings(message):
    try:
        chat_id = message.chat.id
        from accounts.models import Profile
        profile = Profile.objects.filter(chat_id=chat_id).first()

        if not profile or not profile.telegram_email:
            bot.reply_to(message, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        email = profile.telegram_email
        response = requests.get(f"{API_URL}bookings/", params={"email": email})
        if response.status_code != 200:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        bookings = response.json()
        if not isinstance(bookings, list) or not bookings:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        booking_message = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        markup = InlineKeyboardMarkup()
        for booking in bookings:
            room_info = booking['room']
            room_name = room_info['name'] if isinstance(room_info, dict) else str(room_info)
            booking_message += (
                f"ID: {booking['id']}\n"
                f"–ù–æ–º–µ—Ä: {room_name}\n"
                f"–î–∞—Ç—ã: {booking['check_in']} - {booking['check_out']}\n"
                f"–ò–º—è: {booking['first_name']}\n"
                f"–§–∞–º–∏–ª–∏—è: {booking['last_name']}\n"
                f"Email: {booking['email']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['phone']}\n"
            )
            markup.add(InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å ID: {booking['id']}", callback_data=f"cancel_{booking['id']}"))

        bot.send_message(message.chat.id, booking_message, reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def handle_cancel_booking(call):
    try:
        booking_id = call.data.split("_")[1]
        chat_id = call.message.chat.id
        response = requests.delete(f"{API_URL}bookings/{booking_id}/")
        if response.status_code == 204:
            bot.send_message(chat_id, f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID {booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {error_message}")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "find_room")
def go_back_to_find_room(call):
    find_room(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "select_category")
def go_back_to_category_selection(call):
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    bot.register_next_step_handler(call.message, process_category_selection)

@bot.callback_query_handler(func=lambda call: call.data == "select_room")
def go_back_to_room_selection(call):
    chat_id = call.message.chat.id
    user_info = user_data.get(chat_id, {})
    category_id = user_info.get("category_id")

    response = requests.get(
        f"{API_URL}rooms/",
        params={"category": category_id, "check_in": user_info["check_in"], "check_out": user_info["check_out"]}
    )
    rooms = response.json()

    for room in rooms:
        room_info = (
            f"ID: {room['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
            f"–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {room['price_per_night']} —Ä—É–±.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {room['description'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        )
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{room['id']}"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="select_category"),
            InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")
        )
        bot.send_message(
            call.message.chat.id,
            room_info,
            reply_markup=markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    try:
        bot.reply_to(message, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∑–¥–µ—Å—å.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")